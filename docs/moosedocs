#!/usr/bin/env python
import os
import utils
import logging
import sys
import yaml

try:
    from mkdocs.commands import serve, build
    from mkdocs.config import load_config
except:
    print 'Installing mkdocs...'
    try:
        import subprocess
        path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'python', 'mkdocs'))
        subprocess.check_output(['python', 'setup.py', 'install'], cwd=path)
    except:
        print 'Failed to install mkdocs package, please contact the moose-users list for assistance.'
    print 'Succefully install mkdocs package, please re-execute your command: {}'.format(' '.join(sys.argv))
    sys.exit()

import MooseDocs
import argparse


if __name__ == '__main__':

    # Command-line options
    parser = argparse.ArgumentParser(description="Tool for building and developing MOOSE and MOOSE-based application documentation.")
    parser.add_argument('--config-file', '-c', type=str, default=os.path.join('moosedocs.yml'), help="The configuration file to use for building the documentation. (Default: %(default)s)")
    parser.add_argument('--verbose', '-v', action='store_true', help="Execute with verbose (debug) output.")

    subparser = parser.add_subparsers(title='Commands', description="Documenation creation command to execute.", dest='command')

    generate_parser = subparser.add_parser('generate', help="Generate the markdown documentation from MOOSE application executable.")

    serve_parser = subparser.add_parser('serve', help='Sever the documentation using a local server.')
    serve_parser.add_argument('--no-livereload', action='store_true', help="Disable the live reloading of the served site.")
    serve_parser.add_argument('--strict', action='store_true', help='Enable strict mode and abort on warnings.')

    build_parser = subparser.add_parser('build', help='Build the documentation for serving.')

    options = parser.parse_args()

    # Initialize logging
    MooseDocs.init_logging(options.verbose)

    # Configuration file
    if not os.path.exists(options.config_file):
        raise IOError("The supplied configuation file was not found: {}".format(options.config_file))

    # GENERATE:
    if options.command == 'generate':
        gen = MooseDocs.MooseApplicationDocGenerator(options.config_file)
        gen()

    # SERVE:
    elif options.command == 'serve':
        serve.serve(config_file=options.config_file, strict=options.strict, livereload=(not options.no_livereload))

    # BUILD:
    elif options.command == 'build':
        config = load_config(options.config_file)
        build.build(config, clean_site_dir=True)

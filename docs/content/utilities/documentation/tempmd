
<<<<<<< HEAD:docs/content/utilities/documentation/moose_flavored_markdown.md
<<<<<<< HEAD
<<<<<<< HEAD
Documentation generated using MOOSE is generated using the [python-markdown](http://pythonhosted.org/Markdown/) package,
which includes the ability to use extensions from others as well as define custom extensions. This page outlines the
extensions included as well as the custom syntax defined exclusively for documenting MOOSE source code.

---
=======
[TOC]
=======

>>>>>>> a374de4... WIP Update docs
Documentation generated using MOOSE is generated using the [python-markdown] package,
which includes the ability to use extensions from others as well as define custom extensions. The following pages outlines the
outside extensions enabled as well as the custom extensions included with [MOOSE].
extensions included as well as the custom syntax defined exclusively for documenting [MOOSE] source code.

## Python-Markdown Extensions

The [python-markdown] package includes many useful, officially support extensions, as listed on the
[available extensions](https://pythonhosted.org/Markdown/extensions/) page. Table
\ref{official-extensions} is a list the extensions that are utilized on this website and will
likely be of use as you develop your own  website, reports, or presentations.

!table id=official-extensions caption=List of official [python-markdown] extensions useful for writing documentation.
| Name | Description |
| - | - |
| [toc](https://pythonhosted.org/Markdown/extensions/toc.html) | Generates a Table of Contents from a Markdown document and adds it into the resulting HTML document. |

## MooseDocs Extensions
<<<<<<< HEAD
>>>>>>> ed244ee... More doco updates
=======
>>>>>>> a374de4... WIP Update docs

## Extensions
### Symbol Conversion
This package converts ASCII symbols for dashes, quotes, and ellipses to the correct html, for more information see the
documentation for this package: [SmartyPants](http://pythonhosted.org/Markdown/extensions/smarty.html).

### Markdown Include
This package allows for other markdown file to be include within the current file by enclosing the markdown file to
be included within \{\! and \!\}. For more information refer to the package documentation: [markdown-include](https://github.com/cmacmackin/markdown-include).

### Mathematics
The enables the use of [MathJax](http://www.mathjax.org) within markdown, refer to the package documentation for complete
details: [python-markdown-math](https://github.com/mitya57/python-markdown-math).

Inline math may be specified by enclosing the latex in single `$`: $y=a\cdot x + b$. Additionally, stand-alone math may
be enclosed in `$$`:

$$
\begin{equation}
\label{eqn:test}
x=\frac{1+y}{1+2z^2}.
\end{equation}
$$

If the `\label{eqn:test}` was placed within the latex then it is possible to link to the equation using traditional latex syntax (`\eqref{eqn:test}`): Equation \eqref{eqn:test}.

### Admonition
The [admonition](https://pythonhosted.org/Markdown/extensions/admonition.html) package enables for important and critical
items to be highlighted, using the syntax detailed below and the package documentation: [admonition](https://pythonhosted.org/Markdown/extensions/admonition.html).

```markdown
!!! type "An optional title"
    A detailed message paragraph that is indented by 4 spaces and can include any number of lines.
```

The supported "types" for MOOSE are: "info", "note", "important, "warning", "danger", and "error."

!!! info "Optional Info Title"
    This is some information you want people to know about.

!!! note "Optional Note Title"
    This is an example of a note.

!!! important "Optional Important Title"
    This is an example of something important.

!!! warning "Optional Warning Title"
    This is a warning.

!!! danger "Optional Danger Title"
    This is something very dangerous.

!!! error "Optional Error Title"
    This is an error message.
=======
<!--
>>>>>>> bbfba35... doco:docs/content/utilities/documentation/tempmd

## Automatic Links

Moose Flavored Markdown is capable of automatically creating links based on Markdown filenames, which is
especially useful when linking to generated pages. The syntax is identical to creating links as
defined by [mkdocs], however the markdown path may be incomplete.

* `[/Diffusion.md]`: [/Diffusion.md]
* `[/Kernels/index..md]`: [systems/Kernels/index.md]
* `[Diffusion](/Diffusion.md)`: [Diffusion](/Diffusion.md)

---

## Including MOOSE Source Files
It is possible to include complete or partial C++ or input files from the local MOOSE repository. The following sections detail the custom
markdown syntax to needed, including the application of special settings in the form of key, value pairings that are supplied within
the custom markdown. A complete list of available settings is provided in the [Settings](MooseFlavoredMarkdown.md#optional-settings) of the included code.

!!! note
    When including code the path specified should be defined from the "root" directory, which by default is the
    top level of the git repository (e.g., ~/projects/moose).

### Complete Files
You can include complete files from the repository using the `!text` syntax. For example, the following
includes the complete code as shown.

```markdown
!text framework/src/kernels/Diffusion.C max-height=200px strip-extra-newlines=True overflow-y=scroll
```

!text framework/src/kernels/Diffusion.C max-height=200px strip-extra-newlines=True overflow-y=scroll

### Single Line Match
It is possible to show a single line of a file by a snippet that allows the line to be located within
the file. If multiple matches occur only the first match will be shown. For example, the call to
`addClassDescription` can be shown by adding the following.

```markdown
!text framework/src/kernels/Diffusion.C line=addClassDescription
```

!text framework/src/kernels/Diffusion.C line=addClassDescription

### Range Line match
Code starting and ending on lines containing a string is also possible by using the 'start' and 'end'
options. If 'start' is omitted then the snippet will start at the beginning of the file. Similarly, if 'end'
is omitted the snippet will include the remainder of the file content.

```markdown
!text test/tests/kernels/simple_diffusion/simple_diffusion.i start=Kernels end=Executioner overflow-y=scroll max-height=500px
```

!text test/tests/kernels/simple_diffusion/simple_diffusion.i start=Kernels end=Executioner overflow-y=scroll max-height=500px

### Class Methods
By including a method name, in C++ syntax fashion, it is possible to include specific methods from C++ classes in MOOSE. For example,
the following limits the included code to the `computeQpResidual` method.

```markdown
!clang framework/src/kernels/Diffusion.C method=computeQpResidual
```

!clang framework/src/kernels/Diffusion.C method=computeQpResidual

!!! warning "Warning"
    This method uses the clang parser directly, which can be slow. Thus, in general source code should be
    included using the line and range match methods above and this method reserved for cases where those methods
    fail to capture the necessary code.


### Input File Block
By including a block name the included content will be limited to the content matching the supplied name. Notice that the supplied name may be approximate; however, if it is not unique only the first match will appear.

```markdown
!input test/tests/kernels/simple_diffusion/simple_diffusion.i block=Kernels
```

!input test/tests/kernels/simple_diffusion/simple_diffusion.i block=Kernels

### Optional Settings
The following options may be passed to control how the output is formatted.


| Option               | Default | Description |
| -------------------- | ------- | ----------- |
| strip_header         | True    | Toggles the removal of the MOOSE copyright header. |
| repo_link            | True    | Include a link to the source code on GitHub ("label" must be True). |
| label                | True    | Include a label with the filename before the code content block. |
| overflow-y           | Scroll  | The action to take when the text overflow the html container (see [overflow-y](http://www.w3schools.com/cssref/css3_pr_overflow-y.asp)). |
| max-height           | 500px   | The maximum height of the code window (see [max-height](http://www.w3schools.com/cssref/pr_dim_max-height.asp)). |
| strip-extra-newlines | False   | Remove excessive newlines from the included code. |

---

## MOOSE Syntax
A set of special keywords exist for creating MOOSE specific links and tables within your markdown, each are explained below. Note, the
examples below refer to documentation associated with Kernels and/or the Diffusion Kernel. This should be replaced by
the syntax for the system or object being documented.

* `!description /Kernels/Diffusion`: Inserts the class description (added via `addClassDescription` method) from the compiled application.
* `!parameters /Kernels/Diffusion`: Inserts tables describing the available input parameters for an object or action.
* `!inputfiles /Kernels/Diffusion`: Creates a list of input files that use the object or action.
* `!childobjects /Kernels/Diffusion`: Create a list of objects that inherit from the supplied object.
* `!subobjects /Kernels`: Creates a table of objects within the supplied system.
* `!subsystems /Adaptivity`: Creates a table of sub-systems within the supplied system.

---

## Images
!image docs/media/memory_logger-plot_multi.png width=30% padding-left=20px float=right caption=The [memory_logger](/memory_logger.md) is a utility that allows the user to track the memory use of a simulation.

It is possible to include images  with more flexibility than standard markdown.

The markdown keyword for MOOSE images is `!image` followed by the filename as shown below. This command, like most of the other
special MOOSE markdown commands except arbitrary html attributes. Therefore, any keyword, value pairs (e.g., `width=50%`) are
automatically applied to the `<figure>` tag of the image. For example, the following syntax was used to include the image on the right.

```markdown
!image docs/media/memory_logger-plot_multi.png width=30% padding-left=20px float=right caption=The [memory_logger](/memory_logger.md) is a utility that allows the user to track the memory use of a simulation.
```

## Videos

Locally stored or hosted videos can be displayed using the `!video` syntax.

!video http://clips.vorwaerts-gmbh.de/VfE.webm width=100%

## Slideshows
A sequence of images can be shown via a `slider`.
By default the images will auto cycle between images.

A simple example:

```markdown
!slider
    intro.png
    other*.png
```

This would create a slideshow with the first image as `intro.png` and the next images those that are matched by the wildcard `other*.png`.

Valid options for the slider are standard CSS options (see example below).  Changing
the interval between slides, transition time, and button layout is not possible
at this time.

CSS options for background images can be applied to individual images as keyword
pairs.  Additionally, captions can be added to each image and
modified with appropriate CSS options.

Any option that appears after the image (but before "caption", if it exists)
will be applied to the image.  Any option that
appears after "caption" will be applied to the caption.

A full slideshow example might be:
```markdown
!slider max-width=50% left=220px
    docs/media/memory_logger-darkmode.png caption= Output of memory logging tool position=relative left=150px top=-150px
    docs/media/testImage_tallNarrow.png background-color=#F8F8FF caption= This is a tall, thin image color=red font-size=200% width=200px height=100%
    docs/media/github*.png background-color=gray
    docs/media/memory_logger-plot_multi.png
```

!slider max-width=50% left=220px
    docs/media/memory_logger-darkmode.png caption= Output of memory logging tool position=relative left=150px top=-150px
    docs/media/testImage_tallNarrow.png background-color=#F8F8FF caption= This is a tall, thin image color=red font-size=200% width=200px height=100%
    docs/media/github*.png background-color=gray
    docs/media/memory_logger-plot_multi.png

---

## Figures
When writing documentation it is customary to reference figures within text by number. To create a numbered figure use
the `!figure` markdown syntax. This syntax operates nearly identically to the `!image` syntax with two exceptions.

!figure docs/media/memory_logger-plot_multi.png width=250px caption=The numbered prefix is automatically applied to the caption. id=fig:memory_logger

First, the caption will automatically be prefixed with the figure number (e.g., Figure \ref{fig:memory_logger}). The
numbering begins at one and is reset on each page. The prefix "Figure" can be modified by setting
the "prefix" option as in Figure \ref{fig:dark_mode}.

!figure docs/media/memory_logger-darkmode.png width=250px id=fig:dark_mode prefix=Fig. caption=The "prefix" setting changes the text that proceeds the number.

Secondly, the "id" setting must be supplied. This defines the name to which the figure should be referred in the text.

Figures can be referenced with latex style reference commands. For example, using `\ref{fig:memory_logger}` results in a
reference to Figure \ref{fig:memory_logger}. If an invalid "id" is supplied the reference will displayed in red: \ref{fig:invalid_id}.

## Tables

!table id=table:testing caption=This is an example table with a caption.
| 1 | 2 | 3 | 4 | 5 |
|---|---|---|---|----|
| 2 | 4 | 6 | 8 | 10 |

Similar to figures, tables can be referenced: Table \ref{table:testing}.
